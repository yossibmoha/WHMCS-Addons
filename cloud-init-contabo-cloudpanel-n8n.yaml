#cloud-config

package_update: true
package_upgrade: true
timezone: UTC

packages:
  - curl
  - wget
  - ufw
  - ca-certificates
  - gnupg
  - lsb-release
  - jq
  - net-tools
  - mysql-client

write_files:
  # Disable Contabo's MOTD completely
  - path: /etc/motd
    permissions: '0644'
    content: ""
  
  # Disable Ubuntu's default legal notice
  - path: /etc/legal
    permissions: '0644'
    content: ""

  # Show YOUR banner first with dynamic installation status
  - path: /etc/update-motd.d/00-aaa-init-banner
    permissions: '0755'
    content: |
      #!/bin/sh
      echo
      echo "=================================================================="
      echo "                    VPS SERVER HOST"
      echo "=================================================================="
      echo
      echo "  ██╗   ██╗██████╗ ███████╗    ███████╗███████╗██████╗ ██╗   ██╗███████╗██████╗ "
      echo "  ██║   ██║██╔══██╗██╔════╝    ██╔════╝██╔════╝██╔══██╗██║   ██║██╔════╝██╔══██╗"
      echo "  ██║   ██║██████╔╝███████╗    ███████╗█████╗  ██████╔╝██║   ██║█████╗  ██████╔╝"
      echo "  ╚██╗ ██╔╝██╔═══╝ ╚════██║    ╚════██║██╔══╝  ██╔══██╗╚██╗ ██╔╝██╔══╝  ██╔══██╗"
      echo "   ╚████╔╝ ██║     ███████║    ███████║███████╗██║  ██║ ╚████╔╝ ███████╗██║  ██║"
      echo "    ╚═══╝  ╚═╝     ╚══════╝    ╚══════╝╚══════╝╚═╝  ╚═╝  ╚═══╝  ╚══════╝╚═╝  ╚═╝"
      echo
      echo "                        ██╗  ██╗ ██████╗ ███████╗████████╗"
      echo "                        ██║  ██║██╔═══██╗██╔════╝╚══██╔══╝"
      echo "                        ███████║██║   ██║███████╗   ██║   "
      echo "                        ██╔══██║██║   ██║╚════██║   ██║   "
      echo "                        ██║  ██║╚██████╔╝███████║   ██║   "
      echo "                        ╚═╝  ╚═╝ ╚═════╝ ╚══════╝   ╚═╝   "
      echo
      echo "=================================================================="
      echo " This server is hosted by VPS SERVER HOST"
      echo " Support: support@vps-server.host"
      echo "=================================================================="

  # Dynamic installation status checker
  - path: /etc/update-motd.d/01-installation-status
    permissions: '0755'
    content: |
      #!/bin/bash
      
      # Colors
      RED='\033[0;31m'
      GREEN='\033[0;32m'
      YELLOW='\033[1;33m'
      BLUE='\033[0;34m'
      NC='\033[0m'
      
      echo
      echo "=================================================================="
      
      # Check cloud-init status
      CLOUD_INIT_STATUS=$(cloud-init status 2>/dev/null | awk '{print $2}')
      
      if [ "$CLOUD_INIT_STATUS" = "running" ]; then
        echo -e " ${YELLOW}🔄 INSTALLATION IN PROGRESS${NC}"
        echo "=================================================================="
        echo
        echo -e " ${BLUE}📦 Installing: CloudPanel V2 + n8n + Docker + MySQL${NC}"
        echo
        
        # Check what's currently happening
        if systemctl is-active --quiet clp-agent 2>/dev/null; then
          echo -e " ✅ CloudPanel: ${GREEN}Installed${NC}"
        else
          echo -e " ⏳ CloudPanel: ${YELLOW}Installing...${NC}"
        fi
        
        if command -v docker >/dev/null 2>&1; then
          echo -e " ✅ Docker: ${GREEN}Installed${NC}"
        else
          echo -e " ⏳ Docker: ${YELLOW}Installing...${NC}"
        fi
        
        if docker ps | grep -q n8n 2>/dev/null; then
          echo -e " ✅ n8n: ${GREEN}Running${NC}"
        else
          echo -e " ⏳ n8n: ${YELLOW}Installing...${NC}"
        fi
        
        if systemctl is-active --quiet mysql 2>/dev/null; then
          echo -e " ✅ MySQL: ${GREEN}Running${NC}"
        else
          echo -e " ⏳ MySQL: ${YELLOW}Installing...${NC}"
        fi
        
        echo
        echo -e " ${BLUE}📊 Monitor Installation Progress:${NC}"
        echo "   sudo tail -f /var/log/cloud-init-output.log"
        echo "   sudo cloud-init status --wait"
        echo
        echo -e " ${BLUE}🔍 Check Status:${NC}"
        echo "   sudo cloud-init status"
          echo "   systemctl status clp-agent"
        echo "   docker ps"
        echo
        echo -e " ${YELLOW}⏱️  Installation typically takes 5-15 minutes${NC}"
        echo -e " ${YELLOW}🔄 This message will update automatically${NC}"
        
      elif [ "$CLOUD_INIT_STATUS" = "done" ]; then
        # Installation complete - check if services are actually running
        CLOUDPANEL_OK=$(systemctl is-active --quiet clp-agent && echo "yes" || echo "no")
        N8N_OK=$(docker ps | grep -q n8n && echo "yes" || echo "no")
        MYSQL_OK=$(systemctl is-active --quiet mysql && echo "yes" || echo "no")
        
        if [ "$CLOUDPANEL_OK" = "yes" ] && [ "$N8N_OK" = "yes" ] && [ "$MYSQL_OK" = "yes" ]; then
          echo -e " ${GREEN}🎉 INSTALLATION COMPLETE!${NC}"
          echo "=================================================================="
          echo
          IP=$(curl -s ifconfig.me 2>/dev/null || hostname -I | awk '{print $1}')
          echo -e " ${GREEN}🌐 Your Services:${NC}"
          echo "   CloudPanel: https://$IP:8443"
          echo "   n8n:       http://n8n.$IP.nip.io"
          echo
          echo -e " ${BLUE}🔐 Access Info:${NC}"
          echo "   CloudPanel credentials: /home/clp/.clp-installation"
          echo "   n8n login: Check setup logs for credentials"
          echo
          echo -e " ${BLUE}📋 Useful Commands:${NC}"
          echo "   systemctl status clp-agent nginx mysql"
          echo "   docker ps"
          echo "   sudo tail /var/log/cloudpanel-n8n/setup.log"
        else
          echo -e " ${RED}⚠️  INSTALLATION ISSUES DETECTED${NC}"
          echo "=================================================================="
          echo
          echo -e " ${YELLOW}Some services may need attention:${NC}"
          [ "$CLOUDPANEL_OK" = "no" ] && echo -e "   ❌ CloudPanel: ${RED}Not running${NC}"
          [ "$N8N_OK" = "no" ] && echo -e "   ❌ n8n: ${RED}Not running${NC}"
          [ "$MYSQL_OK" = "no" ] && echo -e "   ❌ MySQL: ${RED}Not running${NC}"
          echo
          echo -e " ${BLUE}🔧 Troubleshooting:${NC}"
          echo "   sudo journalctl -u clp-agent -n 50"
          echo "   sudo tail /var/log/cloud-init-output.log"
          echo "   docker logs n8n"
        fi
        
      else
        echo -e " ${BLUE}🔄 SYSTEM READY${NC}"
        echo "=================================================================="
      fi
      
      echo

  # One-shot setup: Docker + DB + CloudPanel reverse proxy site + n8n + final MOTD
  - path: /usr/local/bin/setup-n8n-cloudpanel.sh
    permissions: '0755'
    content: |
      #!/usr/bin/env bash
      set -euo pipefail

      log() { echo "[$(date +%F' '%T)] $*"; }

      # Detect CloudPanel CLI
      CLP="$(command -v clp || true)"
      [ -z "$CLP" ] && CLP="$(command -v clpctl || true)"
      if [ -z "$CLP" ]; then
        echo "CloudPanel CLI not found (clp/clpctl)"; exit 1
      fi

      # Wait for CloudPanel service and MySQL password files
      log "Waiting for CloudPanel..."
      for i in {1..120}; do
        if systemctl is-active --quiet clp-agent && command -v clpctl >/dev/null; then break; fi
        sleep 5
      done

      # Docker + Compose
      if ! command -v docker >/dev/null; then
        curl -fsSL https://get.docker.com | sh
        systemctl enable --now docker
      fi
      if ! docker compose version >/dev/null 2>&1; then
        curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
        COMPOSE_BIN="docker-compose"
      else
        COMPOSE_BIN="docker compose"
      fi

      # IP + domain
      SERVER_IP="$(curl -s -4 https://api64.ipify.org || hostname -I | awk '{print $1}')"
      DOMAIN="${N8N_DOMAIN_OVERRIDE:-n8n.${SERVER_IP}.nip.io}"
      log "Domain: ${DOMAIN}"

      # MySQL root password from CloudPanel
      MYSQL_ROOT_PASS="$(awk -F': ' '/MySQL root password/{print $2}' /home/clp/.clp-installation 2>/dev/null || true)"
      [ -z "$MYSQL_ROOT_PASS" ] && MYSQL_ROOT_PASS="$(cat /home/clp/.mysql-password 2>/dev/null || true)"
      if [ -z "$MYSQL_ROOT_PASS" ]; then
        echo "Could not detect MySQL root password. Check /home/clp/.clp-installation"; exit 1
      fi

      # Create DB + user for n8n
      DB_NAME="n8n_db"
      DB_USER="n8n_user"
      DB_PASS="$(openssl rand -base64 24 | tr -dc A-Za-z0-9 | head -c 24)"
      log "Creating database ${DB_NAME}..."
      mysql -uroot -p"${MYSQL_ROOT_PASS}" <<SQL
      CREATE DATABASE IF NOT EXISTS \`${DB_NAME}\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
      CREATE USER IF NOT EXISTS '${DB_USER}'@'%' IDENTIFIED BY '${DB_PASS}';
      GRANT ALL PRIVILEGES ON \`${DB_NAME}\`.* TO '${DB_USER}'@'%';
      FLUSH PRIVILEGES;
      SQL

      # CloudPanel site (nginx)
      if [ ! -d "/home/clp/sites/${DOMAIN}" ]; then
        log "Creating CloudPanel site ${DOMAIN}..."
        sudo -u clp -H ${CLP} site:add --domain="${DOMAIN}" --php=8.2 --vhost=nginx || true
      fi
      mkdir -p "/home/clp/sites/${DOMAIN}/conf"
      cat > "/home/clp/sites/${DOMAIN}/conf/nginx.conf" <<NGINX
      server {
        listen 80;
        server_name ${DOMAIN};
        location / {
          proxy_pass http://127.0.0.1:5678;
          proxy_http_version 1.1;
          proxy_set_header Upgrade \$http_upgrade;
          proxy_set_header Connection "upgrade";
          proxy_set_header Host \$host;
          proxy_set_header X-Real-IP \$remote_addr;
          proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto \$scheme;
          proxy_read_timeout 86400;
          proxy_send_timeout 86400;
        }
      }
      NGINX
      chown -R clp:clp "/home/clp/sites/${DOMAIN}"
      nginx -t && systemctl reload nginx

      # n8n Docker (MySQL backend), bind only to localhost
      mkdir -p "/home/clp/sites/${DOMAIN}/docker" "/home/clp/sites/${DOMAIN}/n8n-data"
      N8N_ENCRYPTION_KEY="$(openssl rand -hex 32)"
      BASIC_PASS="$(openssl rand -base64 24 | tr -dc A-Za-z0-9 | head -c 20)"
      cat > "/home/clp/sites/${DOMAIN}/docker/.env" <<ENV
      NODE_ENV=production
      N8N_BASIC_AUTH_ACTIVE=true
      N8N_BASIC_AUTH_USER=admin
      N8N_BASIC_AUTH_PASSWORD=${BASIC_PASS}
      N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      N8N_HOST=${DOMAIN}
      N8N_PORT=5678
      N8N_PROTOCOL=http
      WEBHOOK_URL=http://${DOMAIN}
      DB_TYPE=mysqldb
      DB_MYSQLDB_HOST=host.docker.internal
      DB_MYSQLDB_PORT=3306
      DB_MYSQLDB_DATABASE=${DB_NAME}
      DB_MYSQLDB_USER=${DB_USER}
      DB_MYSQLDB_PASSWORD=${DB_PASS}
      ENV

      cat > "/home/clp/sites/${DOMAIN}/docker/docker-compose.yml" <<COMPOSE
      version: "3.8"
      services:
        n8n:
          image: n8nio/n8n:latest
          container_name: n8n
          restart: unless-stopped
          env_file:
            - .env
          ports:
            - "127.0.0.1:5678:5678"
          volumes:
            - ../n8n-data:/home/node/.n8n
          extra_hosts:
            - "host.docker.internal:host-gateway"
          networks:
            - n8n_net
      networks:
        n8n_net:
          driver: bridge
      COMPOSE

      cd "/home/clp/sites/${DOMAIN}/docker"
      if command -v docker-compose >/dev/null 2>&1; then docker-compose up -d; else ${COMPOSE_BIN} up -d; fi

      # Final MOTD section (shown last)
      cat >/etc/update-motd.d/99-zzz-services <<BOTTOM
      #!/bin/sh
      IP=\$(curl -s ifconfig.me || hostname -I | awk '{print \$1}')
      DOMAIN="${DOMAIN}"
      echo
      echo "------------------------------------------------------------------"
      echo " Service URLs"
      echo " - CloudPanel: https://\${IP}:8443"
      echo " - n8n:       http://\${DOMAIN}"
      echo "------------------------------------------------------------------"
      BOTTOM
      chmod +x /etc/update-motd.d/99-zzz-services

      log "Completed. Visit: http://${DOMAIN} (n8n), https://${SERVER_IP}:8443 (CloudPanel)"
      echo "DB name: ${DB_NAME}  DB user: ${DB_USER}  DB pass: ${DB_PASS}"
      echo "n8n login: admin / ${BASIC_PASS}"

runcmd:
  # Remove Contabo's MOTD scripts completely
  - rm -f /etc/update-motd.d/*contabo* /etc/update-motd.d/*Contabo* /etc/update-motd.d/10-* /etc/update-motd.d/50-* 2>/dev/null || true
  - find /etc/update-motd.d/ -type f -exec grep -l -i "contabo\|ubuntu.*warranty" {} \; | xargs rm -f 2>/dev/null || true
  - chmod -x /etc/update-motd.d/* 2>/dev/null || true
  - chmod +x /etc/update-motd.d/00-aaa-init-banner 2>/dev/null || true

  # Disable Ubuntu's system information display
  - rm -f /etc/update-motd.d/00-header /etc/update-motd.d/10-help-text /etc/update-motd.d/50-motd-news /etc/update-motd.d/80-esm /etc/update-motd.d/90-updates-available /etc/update-motd.d/95-hwe-eol 2>/dev/null || true
  - touch /etc/motd.dynamic && chmod 644 /etc/motd.dynamic
  - echo 'ENABLED=0' > /etc/default/motd-news

  # Firewall (keep n8n private; expose via reverse proxy only)
  - ufw --force reset
  - ufw default deny incoming
  - ufw default allow outgoing
  - ufw allow 22/tcp
  - ufw allow 80/tcp
  - ufw allow 443/tcp
  - ufw allow 8443/tcp
  - ufw --force enable

  # Install CloudPanel (MySQL 8.4)
  - curl -fsSL https://installer.cloudpanel.io/ce/v2/install.sh -o /tmp/cloudpanel-install.sh
  - [ bash, -lc, "DB_ENGINE=MYSQL_8.4 bash /tmp/cloudpanel-install.sh" ]

  # n8n + site + DB + final MOTD
  - [ bash, -lc, "/usr/local/bin/setup-n8n-cloudpanel.sh" ]
  # To force a custom domain, use:
  # - [ bash, -lc, "N8N_DOMAIN_OVERRIDE=n8n.example.com /usr/local/bin/setup-n8n-cloudpanel.sh" ]

final_message: |
  CloudPanel + n8n (MySQL) deployed. Your banner shows first; service URLs show last.